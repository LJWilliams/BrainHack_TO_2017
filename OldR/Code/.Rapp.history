rm(list=ls())#
gc()#
source('0_Utilities.R')#
#
load('../Cleaned/data.mat.r1.a.norm.rda')#
load('../Cleaned/data.mat.r1.orig.norm.rda')#
#
load('../Cleaned/data.mat.r1.a.rda')#
load('../Cleaned/data.mat.r1.orig.rda')#
#
load('../Cleaned/brain.voxels.keep.rda')#
load('../Cleaned/brain.voxels.rda')#
DES <- read.csv('../Data/DES.csv',header=T,row.names=1)#
a<-epPCA(data.mat.r1.a.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col)
library(TExPosition)
b<-tepBADA(data.mat.r1.a.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,graphs=FALSE)
prettyPlot(b$TExPosition.Data$fii,col=b$Plotting.Data$fii.col)
prettyPlot(b$TExPosition.Data$fii,col=b$Plotting.Data$fii.col,display_names=FALSE)
prettyPlot(b$TExPosition.Data$fi,col=b$Plotting.Data$fi.col,display_names=FALSE,cex=2,pch=22)
prettyPlot(b$TExPosition.Data$fi,col=b$Plotting.Data$fi.col,display_names=TRUE,cex=2,pch=22,dev.new=FALSE,axes=FALSE,new.plot=FALSE)
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col)
?oro.nifti
??oro.nifti
ls()
brain.voxels.keep
brain.voxels
length(brain.voxels.keep)
dim(a$ExPosition.Data$fi)
dim(a$ExPosition.Data$fj)
?nifti
full.brain <- array(0,dim=c(64,64,31))
full.brain <- array(0,dim=c(64,64,31))#
full.brain[brain.voxels.keep] <- a$ExPosition.Data$fj[,1]#
#
for.nif <- nifti(full.brain,datatype=16)
image(for.nif)
full.brain <- array(0,dim=c(64,64,31))#
full.brain[brain.voxels.keep] <- a$ExPosition.Data$fj[,1]+min(a$ExPosition.Data$fj[,1])#
for.nif <- nifti(full.brain,datatype=16)#
image(for.nif)
a$ExPosition.Data$fj[,1]+min(a$ExPosition.Data$fj[,1])
min(a$ExPosition.Data$fj[,1])
a$ExPosition.Data$fj[,1]
summary(a$ExPosition.Data$fj[,1])
summary(a$ExPosition.Data$fj[,1]+min(a$ExPosition.Data$fj[,1]))
summary(a$ExPosition.Data$fj[,1]-min(a$ExPosition.Data$fj[,1]))
full.brain <- array(0,dim=c(64,64,31))#
full.brain[brain.voxels.keep] <- a$ExPosition.Data$fj[,1]-min(a$ExPosition.Data$fj[,1])#
for.nif <- nifti(full.brain,datatype=16)#
image(for.nif)
image(for.nif,col=hotmetal(64))
full.brain <- array(0,dim=c(64,64,31))#
full.brain[brain.voxels.keep] <- a$ExPosition.Data$fj[,2]-min(a$ExPosition.Data$fj[,2])#
for.nif <- nifti(full.brain,datatype=16)#
image(for.nif,col=hotmetal(64))
??intent
?convert.datatype
nifti
mean(a$ExPosition.Data$fj[,1])
sd(a$ExPosition.Data$fj[,1])
full.brain <- array(0,dim=c(64,64,31))#
full.brain[brain.voxels.keep] <- a$ExPosition.Data$fj[,1]#-min(a$ExPosition.Data$fj[,2])#
for.nif <- nifti(full.brain,datatype=16,intent_code=11,intent_p1=0,intent_p2=sd(a$ExPosition.Data$fj[,1]))#
image(for.nif,col=hotmetal(64))
a$ExPosition.Data$fj[,1]+min(abs(a$ExPosition.Data$fj[,1]))
mean(a$ExPosition.Data$fj[,1]+min(abs(a$ExPosition.Data$fj[,1])))
sd(a$ExPosition.Data$fj[,1]+min(abs(a$ExPosition.Data$fj[,1])))
summary(a$ExPosition.Data$fj[,1]+min(abs(a$ExPosition.Data$fj[,1])))
summary(a$ExPosition.Data$fj[,1]-min(a$ExPosition.Data$fj[,1]))
mean(a$ExPosition.Data$fj[,1]-min(a$ExPosition.Data$fj[,1]))
sd(a$ExPosition.Data$fj[,1]-min(a$ExPosition.Data$fj[,1]))
full.brain <- array(0,dim=c(64,64,31))#
for.brain <- a$ExPosition.Data$fj[,1]-min(a$ExPosition.Data$fj[,1])#
#
full.brain[brain.voxels.keep] <- for.brain#
for.nif <- nifti(full.brain,datatype=16,intent_code=11,intent_p1=mean(for.brain),intent_p2=sd(for.brain))#
image(for.nif,col=hotmetal(64))
full.brain <- array(0,dim=c(64,64,31))#
for.brain <- a$ExPosition.Data$fj[,2]-min(a$ExPosition.Data$fj[,2])#
#
full.brain[brain.voxels.keep] <- for.brain#
for.nif <- nifti(full.brain,datatype=16,intent_code=11,intent_p1=mean(for.brain),intent_p2=sd(for.brain))#
image(for.nif,col=hotmetal(64))
full.brain <- array(0,dim=c(64,64,31))#
for.brain <- a$ExPosition.Data$fj[,3]-min(a$ExPosition.Data$fj[,3])#
#
full.brain[brain.voxels.keep] <- for.brain#
for.nif <- nifti(full.brain,datatype=16,intent_code=11,intent_p1=mean(for.brain),intent_p2=sd(for.brain))#
image(for.nif,col=hotmetal(64))
i=5
i%%10
i=15
i%%10
i%%100
i%%1000
rm(list=ls())#
library(oro.nifti)#
#
make.empty.brain <- function(nifti.image){#
	return(array(0,dim=c(nifti.image@dim)))#
}#
#
plot.brain <- function(values,mask,which.voxels){#
	empty.brain.r1 <- make.empty.brain(mask)#
	empty.brain.r1[which.voxels] <- values#
	dev.new()#
	image(nifti(empty.brain.r1))#
}#
#
all.files <- list.files('../OtherData/Masks/',pattern="*.nii")
all.files
wb.mask.add <- wb.mask <- readNIfTI('WholeBrain_mask.nii',reorient=FALSE)#
brain.voxels <- which(wb.mask@.Data==1)#
#
for(i in 1:length(all.files)){#
	wb.mask.add@.Data <- wb.mask.add@.Data + eval(parse(text=paste(c("readNIfTI('",all.files[i],"',reorient=F)@.Data==1"),collapse="")))#
	print(i)	#
}#
#
vis.mask <- (wb.mask.add@.Data > 2)#
class(vis.mask) <- "numeric"#
#
VV.mask <- wb.mask#
VV.mask@.Data <- vis.mask
all.files <- list.files('../OtherData/Masks/',pattern="*.nii")#
wb.mask.add <- wb.mask <- readNIfTI('./OtherData/Masks/WholeBrain_mask.nii',reorient=FALSE)#
brain.voxels <- which(wb.mask@.Data==1)#
#
for(i in 1:length(all.files)){#
	wb.mask.add@.Data <- wb.mask.add@.Data + eval(parse(text=paste(c("readNIfTI('",all.files[i],"',reorient=F)@.Data==1"),collapse="")))#
	print(i)	#
}#
#
vis.mask <- (wb.mask.add@.Data > 2)#
class(vis.mask) <- "numeric"#
#
VV.mask <- wb.mask#
VV.mask@.Data <- vis.mask
rm(list=ls())#
library(oro.nifti)#
#
make.empty.brain <- function(nifti.image){#
	return(array(0,dim=c(nifti.image@dim)))#
}#
#
plot.brain <- function(values,mask,which.voxels){#
	empty.brain.r1 <- make.empty.brain(mask)#
	empty.brain.r1[which.voxels] <- values#
	dev.new()#
	image(nifti(empty.brain.r1))#
}
all.files <- list.files('../OtherData/Masks/',pattern="*.nii")#
wb.mask.add <- wb.mask <- readNIfTI('./OtherData/Masks/WholeBrain_mask.nii',reorient=FALSE)#
brain.voxels <- which(wb.mask@.Data==1)
all.files <- list.files('../OtherData/Masks/',pattern="*.nii")#
wb.mask.add <- wb.mask <- readNIfTI('../OtherData/Masks/WholeBrain_mask.nii',reorient=FALSE)
brain.voxels <- which(wb.mask@.Data==1)#
#
for(i in 1:length(all.files)){#
	wb.mask.add@.Data <- wb.mask.add@.Data + eval(parse(text=paste(c("readNIfTI('",all.files[i],"',reorient=F)@.Data==1"),collapse="")))#
	print(i)	#
}#
#
vis.mask <- (wb.mask.add@.Data > 2)#
class(vis.mask) <- "numeric"#
#
VV.mask <- wb.mask#
VV.mask@.Data <- vis.mask
all.files <- list.files('../OtherData/Masks/',pattern="*.nii")#
wb.mask.add <- wb.mask <- readNIfTI('../OtherData/Masks/WholeBrain_mask.nii',reorient=FALSE)#
brain.voxels <- which(wb.mask@.Data==1)
for(i in 1:length(all.files)){#
	wb.mask.add@.Data <- wb.mask.add@.Data + eval(parse(text=paste(c("readNIfTI('",all.files[i],"',reorient=F)@.Data==1"),collapse="")))#
	print(i)	#
}#
#
vis.mask <- (wb.mask.add@.Data > 2)#
class(vis.mask) <- "numeric"#
#
VV.mask <- wb.mask#
VV.mask@.Data <- vis.mask
paste0("../OtherData/Masks/",all.files)
all.files <- paste0("../OtherData/Masks/",list.files('../OtherData/Masks/',pattern="*.nii"))
all.files <- paste0("../OtherData/Masks/",list.files('../OtherData/Masks/',pattern="*.nii"))#
wb.mask.add <- wb.mask <- readNIfTI('../OtherData/Masks/WholeBrain_mask.nii',reorient=FALSE)#
brain.voxels <- which(wb.mask@.Data==1)#
#
for(i in 1:length(all.files)){#
	wb.mask.add@.Data <- wb.mask.add@.Data + eval(parse(text=paste(c("readNIfTI('",all.files[i],"',reorient=F)@.Data==1"),collapse="")))#
	print(i)	#
}
rm(list=ls())#
library(oro.nifti)#
#
make.empty.brain <- function(nifti.image){#
	return(array(0,dim=c(nifti.image@dim)))#
}#
#
plot.brain <- function(values,mask,which.voxels){#
	empty.brain.r1 <- make.empty.brain(mask)#
	empty.brain.r1[which.voxels] <- values#
	dev.new()#
	image(nifti(empty.brain.r1))#
}#
#
all.files <- paste0("../OtherData/Masks/",list.files('../OtherData/Masks/',pattern="*.nii"))#
wb.mask.add <- wb.mask <- readNIfTI('../OtherData/Masks/WholeBrain_mask.nii',reorient=FALSE)#
brain.voxels <- which(wb.mask@.Data==1)#
#
for(i in 1:length(all.files)){#
	wb.mask.add@.Data <- wb.mask.add@.Data + eval(parse(text=paste(c("readNIfTI('",all.files[i],"',reorient=F)@.Data==1"),collapse="")))#
	print(i)	#
}#
#
vis.mask <- (wb.mask.add@.Data > 2)#
class(vis.mask) <- "numeric"#
#
VV.mask <- wb.mask#
VV.mask@.Data <- vis.mask
VV.mask
image(VV.mask)
source('0_Utilities.R')
source('0_Utilities.R')#
	##A whole brain and a VV mask are created in the 0_Utilities function.#
##data#
run1.data <- readNIfTI('../Data/filtered_func_data_fMRI1.nii',reorient=FALSE)#
##Soon, we need to make a matrix to hold the data. #
##Here, the data are 4D:#
	##X, Y, Z is 64 x 64 x 31#
	##T (time) is 217, see:#
print(run1.data)#
#
##so we want 217 rows by (64 x 64 x 31) columns#
	##that is, each time point/stimulus (217) x all voxels (64 x 64 x 31)#
		##however, that includes a lot of non-brain voxels. So, which voxels do we want?#
##Just the voxels for the brain.#
brain.voxels <- which(wb.mask@.Data==1)#
all.data.mat.r1 <- matrix(0,run1.data@dim[4],length(brain.voxels))#
for(i in 1:run1.data@dim[4]){#
	r1.tr.i <- run1.data@.Data[,,,i]#
	all.data.mat.r1[i,] <- r1.tr.i[brain.voxels]#
}#
###TRs are 2s#
##for both runs#
	#first face at TR 12#
	#last face at TR 209#
##this is where things get weird. We know the HRF in response to stimulus doesn't start at 	the first stimulus presentation.#
##The HRF ususally starts around 3-4s after presentation. So that means we want to take the 14th TR, and then the next 191 so we have 192 TRs that represent stimulus presentation.#
#
##keep only relevant TRs:#
data.mat.r1 <- all.data.mat.r1[14:(14+191),]
r1.sd <- apply(data.mat.r1,2,sd)
r1.snr <- apply(data.mat.r1,2,function(x){sqrt(mean(x)/sd(x))})
drop.vox <- which(r1.snr < 7 | r1.sd < 30)#
brain.voxels.drop <- brain.voxels[drop.vox]
keep.vox <- which(r1.snr >= 7 & r1.sd >= 30)#
brain.voxels.notdropped <- brain.voxels[keep.vox]
new.wb.mask <- wb.mask#
new.wb.mask@.Data[brain.voxels.drop] <- 0#
new.wb.mask@.Data[brain.voxels.notdropped] <- 1
brain.voxels.keep <- which(new.wb.mask@.Data==1)#
#
VV.voxels.keep <- which((new.wb.mask@.Data+VV.mask@.Data)==2)
##Drop 'em!#
data.mat.r1.wb <- data.mat.r1[, which(brain.voxels %in% brain.voxels.keep)]#
data.mat.r1.vv <- data.mat.r1[, which(brain.voxels %in% VV.voxels.keep)]
##linear detrend across voxels#
data.mat.r1.wb.ld <- apply(data.mat.r1.wb,2,lin.det)#
data.mat.r1.vv.ld <- apply(data.mat.r1.vv,2,lin.det)
DES <- read.csv('../Data/DES.csv',header=T,row.names=1)
data.mat.r1.wb.norm <- rowNorms(data.mat.r1.wb.ld,'z')#
data.mat.r1.vv.norm <- rowNorms(data.mat.r1.vv.ld,'z')
a <- epPCA(data.mat.r1.vv.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE)
prettyScree(a$ExPosition.Data$eigs)
epGraphs(a,x_axis=2,y_axis=3,contributionPlots=FALSE,correlationPlotter=FALSE)
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc)#
}
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i])#
}
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	prettyPlot(as.matrix(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),])),col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE)#
}
as.matrix(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))
colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),])
dim(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))
t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	prettyPlot(t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),])),col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE)#
}
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	prettyPlot(t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),])),col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3)#
}
colz$gc
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3)#
}
a <- epPCA(data.mat.r1.wb.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE)
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i])#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3)#
}
a <- epPCA(data.mat.r1.wb.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i])#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3)#
}
prettyScree(a$ExPosition.Data$eigs)
source('0_Utilities.R')#
	##A whole brain and a VV mask are created in the 0_Utilities function.#
##data#
run1.data <- readNIfTI('../Data/filtered_func_data_fMRI1.nii',reorient=FALSE)#
##Soon, we need to make a matrix to hold the data. #
##Here, the data are 4D:#
	##X, Y, Z is 64 x 64 x 31#
	##T (time) is 217, see:#
print(run1.data)#
#
##so we want 217 rows by (64 x 64 x 31) columns#
	##that is, each time point/stimulus (217) x all voxels (64 x 64 x 31)#
		##however, that includes a lot of non-brain voxels. So, which voxels do we want?#
##Just the voxels for the brain.#
brain.voxels <- which(wb.mask@.Data==1)#
all.data.mat.r1 <- matrix(0,run1.data@dim[4],length(brain.voxels))#
for(i in 1:run1.data@dim[4]){#
	r1.tr.i <- run1.data@.Data[,,,i]#
	all.data.mat.r1[i,] <- r1.tr.i[brain.voxels]#
}#
###TRs are 2s#
##for both runs#
	#first face at TR 12#
	#last face at TR 209#
##this is where things get weird. We know the HRF in response to stimulus doesn't start at 	the first stimulus presentation.#
##The HRF ususally starts around 3-4s after presentation. So that means we want to take the 14th TR, and then the next 191 so we have 192 TRs that represent stimulus presentation.#
#
##keep only relevant TRs:#
data.mat.r1 <- all.data.mat.r1[14:(14+191),]#
##pick a few random voxels and plot time courses:#
plot.timecourse(data.mat.r1,columns=c(100,1000,5000,10000,50000))#
#
##Now let's visualize the distribution of voxel intensities:#
dev.new()#
h<-hist(c(data.mat.r1),breaks=250,col="grey80",border=NA)#
##visualize S.D. of voxels#
r1.sd <- apply(data.mat.r1,2,sd)#
plot.brain(r1.sd,wb.mask,brain.voxels)#
dev.new()#
h<-hist(r1.sd,breaks=500,col="grey80",border=NA)#
abline(v=30,col="red",lwd=2)#
#
##visualize the SNR of voxels#
r1.snr <- apply(data.mat.r1,2,function(x){sqrt(mean(x)/sd(x))})#
plot.brain(r1.snr,wb.mask,brain.voxels)#
dev.new()#
h<-hist(r1.snr,breaks=500,col="grey80",border=NA)#
abline(v=7,col="red",lwd=2)
rm(list=ls())#
gc()#
source('0_Utilities.R')#
#
load('../Cleaned/data.mat.r1.a.norm.rda')#
load('../Cleaned/data.mat.r1.orig.norm.rda')#
#
load('../Cleaned/data.mat.r1.a.rda')#
load('../Cleaned/data.mat.r1.orig.rda')#
#
load('../Cleaned/brain.voxels.keep.rda')#
load('../Cleaned/brain.voxels.rda')
getwd()
source('0_Utilities.R')#
	##A whole brain and a VV mask are created in the 0_Utilities function.#
##data#
run1.data <- readNIfTI('../Data/filtered_func_data_fMRI1.nii',reorient=FALSE)#
##Soon, we need to make a matrix to hold the data. #
##Here, the data are 4D:#
	##X, Y, Z is 64 x 64 x 31#
	##T (time) is 217, see:#
print(run1.data)#
#
##so we want 217 rows by (64 x 64 x 31) columns#
	##that is, each time point/stimulus (217) x all voxels (64 x 64 x 31)#
		##however, that includes a lot of non-brain voxels. So, which voxels do we want?#
##Just the voxels for the brain.#
brain.voxels <- which(wb.mask@.Data==1)#
all.data.mat.r1 <- matrix(0,run1.data@dim[4],length(brain.voxels))#
for(i in 1:run1.data@dim[4]){#
	r1.tr.i <- run1.data@.Data[,,,i]#
	all.data.mat.r1[i,] <- r1.tr.i[brain.voxels]#
}#
###TRs are 2s#
##for both runs#
	#first face at TR 12#
	#last face at TR 209#
##this is where things get weird. We know the HRF in response to stimulus doesn't start at 	the first stimulus presentation.#
##The HRF ususally starts around 3-4s after presentation. So that means we want to take the 14th TR, and then the next 191 so we have 192 TRs that represent stimulus presentation.#
#
##keep only relevant TRs:#
data.mat.r1 <- all.data.mat.r1[14:(14+191),]
r1.sd <- apply(data.mat.r1,2,sd)
r1.snr <- apply(data.mat.r1,2,function(x){sqrt(mean(x)/sd(x))})
drop.vox <- which(r1.snr < 7 | r1.sd < 30)#
brain.voxels.drop <- brain.voxels[drop.vox]
keep.vox <- which(r1.snr >= 7 & r1.sd >= 30)#
brain.voxels.notdropped <- brain.voxels[keep.vox]
new.wb.mask <- wb.mask#
new.wb.mask@.Data[brain.voxels.drop] <- 0#
new.wb.mask@.Data[brain.voxels.notdropped] <- 1
brain.voxels.keep <- which(new.wb.mask@.Data==1)#
#
VV.voxels.keep <- which((new.wb.mask@.Data+VV.mask@.Data)==2)
##Drop 'em!#
data.mat.r1.wb <- data.mat.r1[, which(brain.voxels %in% brain.voxels.keep)]#
data.mat.r1.vv <- data.mat.r1[, which(brain.voxels %in% VV.voxels.keep)]
data.mat.r1.wb.ld <- apply(data.mat.r1.wb,2,lin.det)#
data.mat.r1.vv.ld <- apply(data.mat.r1.vv,2,lin.det)
data.mat.r1.wb.norm <- rowNorms(data.mat.r1.wb.ld,'z')#
data.mat.r1.vv.norm <- rowNorms(data.mat.r1.vv.ld,'z')
save(data.mat.r1.a.norm,file='../Cleaned/data.mat.r1.a.norm.rda')#
save(data.mat.r1.orig.norm,file='../Cleaned/data.mat.r1.orig.norm.rda')#
save(data.mat.r1.a,file='../Cleaned/data.mat.r1.a.rda')#
save(data.mat.r1.orig,file='../Cleaned/data.mat.r1.orig.rda')#
#
save(brain.voxels,file='../Cleaned/brain.voxels.rda')#
save(brain.voxels.keep,file='../Cleaned/brain.voxels.keep.rda')
dim(data.mat.r1.vv.norm)
which(brain.voxels %in% VV.voxels.keep)
dim(data.mat.r1.vv.norm)
brain.voxels
ls()
VV.mask
VV.voxels.keep
vv.voxels
vv.voxels <- which(brain.voxels %in% VV.voxels.keep)
vv.voxels
VV.voxels.keep
save(data.mat.r1.vv.norm,file='../Cleaned/data.mat.r1.vv.norm.rda')#
vv.voxels <- which(brain.voxels %in% VV.voxels.keep)#
save(vv.voxels,file='../Cleaned/vv.voxels.rda')#
save(VV.voxels.keep,file='./Cleaned/VV.voxels.keep.rda')#
save(VV.mask,file='./Cleaned/VV.mask.rda')
save(data.mat.r1.vv.norm,file='../Cleaned/data.mat.r1.vv.norm.rda')#
vv.voxels <- which(brain.voxels %in% VV.voxels.keep)#
save(vv.voxels,file='../Cleaned/vv.voxels.rda')#
save(VV.voxels.keep,file='../Cleaned/VV.voxels.keep.rda')#
save(VV.mask,file='../Cleaned/VV.mask.rda')
VV.mask
image(vv.voxels)
image(VV.mask)
brain.voxels
VV.voxels.keep
data.mat.r1.vv.norm
a<-epPCA(data.mat.r1.vv.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)
DES <- read.csv('../Data/DES.csv',header=T,row.names=1)#
#a<-epPCA(data.mat.r1.a.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)#
a<-epPCA(data.mat.r1.vv.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)
prettyScree(a$ExPosition.Data$eigs)#
#
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i])#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3)#
}
data.mat.r1.wb.norm
a<-epPCA(data.mat.r1.wb.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)
prettyScree(a$ExPosition.Data$eigs)#
#
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i])#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3)#
}
a<-epPCA(data.mat.r1.vv.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)#
#a<-epPCA(data.mat.r1.wb.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)#
#
prettyScree(a$ExPosition.Data$eigs)#
#
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i])#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3)#
}
xa <- 2#
ya <- 3#
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i],x_axis=xa,y_axis=ya)#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3,x_axis=xa,y_axis=ya)#
}
xa <- 3#
ya <- 4#
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i],x_axis=xa,y_axis=ya)#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3,x_axis=xa,y_axis=ya)#
}
xa <- 4#
ya <- 5#
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i],x_axis=xa,y_axis=ya)#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3,x_axis=xa,y_axis=ya)#
}
xa <- 5#
ya <- 6#
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i],x_axis=xa,y_axis=ya)#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3,x_axis=xa,y_axis=ya)#
}
xa <- 6#
ya <- 7#
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	peeledHull(a$ExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i],x_axis=xa,y_axis=ya)#
}#
#
prettyPlot(a$ExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$ExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3,x_axis=xa,y_axis=ya)#
}
load('data.mat.r1.vv.norm.rda')
rm(list=ls())#
gc()#
source('0_Utilities.R')#
#
# load('../Cleaned/data.mat.r1.a.norm.rda')#
# load('../Cleaned/data.mat.r1.orig.norm.rda')#
#
# load('../Cleaned/data.mat.r1.a.rda')#
# load('../Cleaned/data.mat.r1.orig.rda')#
#
# load('../Cleaned/brain.voxels.keep.rda')#
# load('../Cleaned/brain.voxels.rda')#
#
load('../Cleaned/data.mat.r1.vv.norm.rda')
DES <- read.csv('../Data/DES.csv',header=T,row.names=1)
rm(list=ls())#
gc()#
source('0_Utilities.R')#
#
# load('../Cleaned/data.mat.r1.a.norm.rda')#
# load('../Cleaned/data.mat.r1.orig.norm.rda')#
#
# load('../Cleaned/data.mat.r1.a.rda')#
# load('../Cleaned/data.mat.r1.orig.rda')#
#
# load('../Cleaned/brain.voxels.keep.rda')#
# load('../Cleaned/brain.voxels.rda')#
#
load('../Cleaned/data.mat.r1.vv.norm.rda')#
#
DES <- read.csv('../Data/DES.csv',header=T,row.names=1)
a<-tepBADA(data.mat.r1.vv.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)
xa <- 1#
ya <- 2#
##real quick#
colz <- createColorVectorsByDesign(DES)#
prettyPlot(a$TExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
#
prettyPlot(a$TExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	peeledHull(a$TExPosition.Data$fi[which(DES[,i]==1),],col=colz$gc[i],x_axis=xa,y_axis=ya)#
}#
#
prettyPlot(a$TExPosition.Data$fi,col=a$Plotting.Data$fi.col,display_names=FALSE,x_axis=xa,y_axis=ya)#
for(i in 1:ncol(DES)){#
	this.thing <- t(colMeans(a$TExPosition.Data$fi[which(DES[,i]==1),]))#
	rownames(this.thing) <- rownames(colz$gc)[i]#
	prettyPlot(this.thing,col=colz$gc[i],dev.new=FALSE,axes=FALSE,new.plot=FALSE,pch=15,cex=3,x_axis=xa,y_axis=ya)#
}
tepGraphs(a)
tepGraphs(a,x_axis=2,y_axis=3)
a$TExPosition.Data$fj
a$TExPosition.Data$fi
prettyPlot(a$TExPosition.Data$fi,x_axis=2,y_axis=3)
a$TExPosition.Data$X
save(a$TExPosition.Data$X,file='../Cleaned/GROUP_FACES_ACT.rda')
bada.mat <- a$TExPosition.Data$X; save(bada.mat,file='../Cleaned/GROUP_FACES_ACT.rda')
rm(list=ls())#
gc()#
source('0_Utilities.R')#
#
# load('../Cleaned/data.mat.r1.a.norm.rda')#
# load('../Cleaned/data.mat.r1.orig.norm.rda')#
#
# load('../Cleaned/data.mat.r1.a.rda')#
# load('../Cleaned/data.mat.r1.orig.rda')#
#
# load('../Cleaned/brain.voxels.keep.rda')#
# load('../Cleaned/brain.voxels.rda')#
#
load('../Cleaned/data.mat.r1.vv.norm.rda')#
#
DES <- read.csv('../Data/DES.csv',header=T,row.names=1)
a<-epPCA(data.mat.r1.vv.norm,DESIGN=DES,make_design_nominal=FALSE,scale=FALSE,center=FALSE,graphs=FALSE)
epGraphs(a,contributionPlots=F,correlationPlotter=F)
DES
prettyScree(a$ExPosition.Data$eigs)
ls()
save(DES,file="/Volumes/JOHNNYFIVE/Personal/Webbles/fMRI_R/S01/Cleaned/DES.rda")
rm(list=ls())#
gc()#
source('0_Utilities.R')#
#
# load('../Cleaned/data.mat.r1.a.norm.rda')#
# load('../Cleaned/data.mat.r1.orig.norm.rda')#
#
# load('../Cleaned/data.mat.r1.a.rda')#
# load('../Cleaned/data.mat.r1.orig.rda')#
#
# load('../Cleaned/brain.voxels.keep.rda')#
# load('../Cleaned/brain.voxels.rda')#
#
load('../Cleaned/data.mat.r1.vv.norm.rda')#
#
DES <- read.csv('../Data/DES.csv',header=T,row.names=1)
a<-epPCA(data.mat.r1.vv.norm,DESIGN=DES,make_design_nominal=FALSE,scale=T,center=T,graphs=FALSE)
epGraphs(a,contributionPlots=F,correlationPlotter=F)
DES
DES[,1]
DES[,2]
DES[,3]
DES[,4]
DES[,5]
DES[,6]
